version: '3.8'
services:
    app:
        build:
            context: ./docker/8.2
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        restart: unless-stopped
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
        environment:
            WWWUSER: '${WWWUSER}'
            XDEBUG_MODE: '${XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${XDEBUG_CONFIG:-client_host=host.docker.internal}'
            APP_DOMAIN: '${APP_DOMAIN}'
            APP_ENV: '${APP_ENV:-local}'
        volumes:
            - '.:/var/www/html'
            - '/var/www/html/node_modules/'
        networks:
            - bridge
        depends_on:
            - redis
            - pgsql
            - soketi

    pgsql:
        image: postgres:15
        command:
            - 'postgres'
            - '-c'
            - 'config_file=/etc/postgresql.conf'
        restart: unless-stopped
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
            APP_DOMAIN: '${APP_DOMAIN}'
            APP_ENV: '${APP_ENV:-local}'
        volumes:
            - './startup/pgsql/:/docker-entrypoint-initdb.d/'
            - './docker/postgresql.conf:/etc/postgresql.conf'
            - './docker/pg_hba.conf:/etc/postgresql/pg_hba.conf'
            - 'pgsql-data:/var/lib/postgresql/data'
        networks:
            - bridge
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s

    soketi:
        image: 'quay.io/soketi/soketi:latest-16-distroless'
        environment:
            SOKETI_DEBUG: '1'
            SOKETI_METRICS_SERVER_PORT: '9601'
        ports:
            - '${SOKETI_PORT:-6001}:6001'
            - '${SOKETI_METRICS_SERVER_PORT:-9601}:9601'
        networks:
            - bridge

    redis:
        image: redis:7-alpine
        restart: unless-stopped
        command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
        ports:
            - "${FORWARD_REDIS_PORT:-6379}:${REDIS_PORT:-6379}"
        environment:
            APP_DOMAIN: '${APP_DOMAIN}'
            APP_ENV: '${APP_ENV:-local}'
        volumes:
            - redis-data:/data
        networks:
            - bridge
        healthcheck:
            test: redis-cli -h redis -p 6379 ping
            start_period: 3s
            interval: 2s
            timeout: 2s
            retries: 10

networks:
    bridge:
        driver: bridge
volumes:
    pgsql-data:
        driver: local
    redis-data:
        driver: local
